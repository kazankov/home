# -*- coding: utf-8 -*-import foursquareimport pymongofrom pymongo import Connectionimport sysimport mathimport os.pathimport sslimport urlparseimport urllibdef sqr(x):	return x*x; def LatLongToMerc(lon, lat):    if lat>89.5:        lat=89.5    if lat<-89.5:        lat=-89.5     rLat = math.radians(lat)    rLong = math.radians(lon)     a=6378137.0    b=6356752.3142    f=(a-b)/a    e=math.sqrt(2*f-f**2)    x=a*rLong    y=a*math.log(math.tan(math.pi/4+rLat/2)*((1-e*math.sin(rLat))/(1+e*math.sin(rLat)))**(e/2))    return {'x':x,'y':y} def bboxArea(n, s, w, e):	topLeft = LatLongToMerc(w, n)	bottomRight = LatLongToMerc(e, s)	return abs((bottomRight['x']-topLeft['x'])*(bottomRight['y']-topLeft['y']))consumer_key = '2FJY5GX5RSKGTNQJRHUBSGSQSUOFRYNDMM5P0S5XZARET5P5';consumer_secret = 'WQFGRJPGV3PC3OWWDSQJ2JVMUBW5YFL0AQUUKO5XPIBJKI34';fs = foursquare.Foursquare(client_id=consumer_key, client_secret=consumer_secret, redirect_uri='Callback URL')mConn = Connection("217.199.220.182")mPoi = mConn.poi.poimPoiTypes = mConn.poi.poiTypesimport datetimeimport timestartTime = NonereqInHour = Nonedef searchVenue(n, s, w, e):	global startTime	global reqInHour	if not startTime:		startTime = datetime.datetime.now()		reqInHour = 0	curTime = datetime.datetime.now()	if (curTime - startTime).total_seconds >= 3600:		startTime = curTime		reqInHour = 0		if reqInHour >= 450:		time.sleep(60)		return searchVenue(n, s, w, e)	else:		reqInHour = reqInHour + 1		return fs.venues.search({'limit':50, 'intent':'browse', 'sw':'%d,%d'%(s,w), 'ne':'%d,%d'%(n,e)})		count=0def process(n, s, w, e):	global count	def procHalf():		halfLat = (s+n)/2		halfLon = (e+w)/2		process(n, halfLat, w, halfLon)		process(n, halfLat, halfLon, e)		process(halfLat, s, w, halfLon)		process(halfLat, s, halfLon, e)			areaMax = 10000000000 #10 000 квадратных километра	areaMin = 100	venMax=50	area = bboxArea(n, s, w, e)	if area > areaMax: #здесь прямоугольник распадается на  4 части		procHalf()	else:		res = searchVenue(n, s, w, e)		if len(res['venues'])>=venMax and area>areaMin:			procHalf()		else:			for iter in res['venues']:				obj = mPoi.find({"sourceId": 'foursquare_%s'%(iter['id'])})				if not obj:					obj = {}								types = []				for cat in iter['categories']:					catCur = mPoiTypes.find({"sourceNames": cat['name']}, {"_id":1})					catObj = next(catCur, None)					if(catObj):						types.append(obj["_id"])				if not types:					continue #no types found, skip										obj['sourceId'] = 'foursquare_%s'%(iter['id'])				obj['name'] = iter['name']				obj['geoPoint'] = {'lat': iter['lat'], 'lon': iter['lng']}				obj['types'] = types											mPoi.save(obj)				count = count+1					process(46.53468, 62.93923, 62.57813, 28.74023)print count			