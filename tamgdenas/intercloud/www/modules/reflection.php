<script src="/js/jquery-1.6.min.js" type="text/javascript"></script><script language="Javascript">	function getXmlHttp()	{	  var xmlhttp;	  try {		xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");	  } catch (e) {		try {		  xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");		} catch (E) {		  xmlhttp = false;		}	  }	  if (!xmlhttp && typeof XMLHttpRequest!='undefined') {		xmlhttp = new XMLHttpRequest();	  }	  return xmlhttp;	}		var output = null;	function execCmdMethod(el)	{		el = $(el);		var form=el.parents('form').first();	    var cmd = form.attr('_cmd'); 				var method = form.attr('_method');				var url = '/'+cmd;		var data = form.serialize();						if (window.File && window.FileReader && window.FileList && window.Blob) {		  // Great success! All the File APIs are supported.		} else {		  alert('The File APIs are not fully supported in this browser.');		}						var fInputs = [];		var out = {};		form.find('input:file').each(function()		{			fInputs.push(this);		});				function finish()		{			for(var name in out)			{				data+='&'+name+'='+encodeURIComponent(out[name]);			}					if(method == 'get')			{				url = url+'?'+data;				data = null;			}						var req = getXmlHttp();			req.open(method, url, true);			req.onreadystatechange = function()			{				if(req.readyState!=4) return;								if(req.status == 200)				{					if(!output) output = $('<textarea style="border:1px solid black; width: 500; height:300; position:fixed; right:30; top:30;"></textarea>');					$(document.body).append(output);					output.val(req.responseText);				}else{					alert('error!\n cmd: '+url+'\n  response:'+req.responseText);				}			}				req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");			req.send(data);					}						function processInput()		{			if(fInputs.length == 0) 			{				finish();				return;			}			var iter = fInputs.shift();			var f = iter.files[0];						var reader = new window.FileReader();			reader.onload = function(event) {				out[iter.name] = event.target.result;				processInput();			};			 			reader.onerror = function(event) {				alert("Файл не может быть прочитан! код " + event.target.error.code);			};			 			reader.readAsText(f);					}		processInput();		}</script><?//русский текстfunction stripCommentSymbols($s){	$s = preg_replace('/\/\*\*/', '', $s);	$s = preg_replace('/\*\//', '', $s);	return preg_replace('/\*/', '', $s);}function showCmd($command){	$className = ucfirst($command);	$srv = new ReflectionClass($className); 	echo "<p align='center'><b>{$command} (".stripCommentSymbols($srv->getDocComment()).")</b></p>";	$farr = $srv->getMethods();	foreach($farr as $method)	{		$refl = $srv->getMethod($method->name);		$params = $refl->getParameters();		$buf = array();		for($i = 0; $i < count($params); $i++)		{				$p = $params[$i];			$type = 'text';			if($p->isDefaultValueAvailable() && $p->isDefaultValueConstant())			{				$constN = $p->getDefaultValueConstantName();				if($constN == 'FILE_CONSTANT') $type = 'file';			}			$buf[] = array('name'=>$p->getName(), 'type'=>$type);		}		$buf2 = array();		foreach($buf as $p)		{			$buf2[] = $p['name'];		}		echo "<p><b>{$method->name}(".implode(', ', $buf2).")</b></p>";		echo stripCommentSymbols($method->getDocComment());?>		<br><br>			<form _cmd="<?=$command?>" _method="<?=$method->name?>" >			<table>				<tr>					<td>												<table>		<?				foreach($buf as $p)				{?>							<tr><td width='80'><?=$p['name']?>: </td><td>														<input name='<?=$p['name']?>' type='<?=$p['type']?>'>														</td></tr>				<?}?>						</table>					</td>					<td valign='top'>						<a href="javascript:void(0);" onclick="execCmdMethod(this)">выполнить</a>					</td>				</tr>			</table>			</form>					<hr><?			}}?>